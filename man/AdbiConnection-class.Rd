% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AdbiConnection.R,
%   R/dbAppendTable_AdbiConnection_character_data.frame.R,
%   R/dbBegin_AdbiConnection.R, R/dbCommit_AdbiConnection.R,
%   R/dbDataType_AdbiConnection.R, R/dbExistsTable_AdbiConnection_Id.R,
%   R/dbExistsTable_AdbiConnection_SQL.R,
%   R/dbExistsTable_AdbiConnection_character.R,
%   R/dbGetInfo_AdbiConnection.R, R/dbIsValid_AdbiConnection.R,
%   R/dbListFields_AdbiConnection_Id.R, R/dbListFields_AdbiConnection_SQL.R,
%   R/dbListFields_AdbiConnection_character.R, R/dbListTables_AdbiConnection.R,
%   R/dbQuoteIdentifier_AdbiConnection_character.R,
%   R/dbQuoteLiteral_AdbiConnection_character.R,
%   R/dbQuoteString_AdbiConnection_character.R,
%   R/dbRemoveTable_AdbiConnection_character.R,
%   R/dbRemoveTable_AdbiConnection_Id.R, R/dbRollback_AdbiConnection.R,
%   R/dbUnquoteIdentifier_AdbiConnection.R,
%   R/dbWriteTable_AdbiConnection_Id_data.frame.R,
%   R/dbWriteTable_AdbiConnection_SQL_data.frame.R,
%   R/dbWriteTable_AdbiConnection_character_data.frame.R,
%   R/show_AdbiConnection.R
\docType{class}
\name{AdbiConnection-class}
\alias{AdbiConnection-class}
\alias{dbAppendTable_AdbiConnection}
\alias{dbAppendTable,AdbiConnection-method}
\alias{dbBegin_AdbiConnection}
\alias{dbBegin,AdbiConnection-method}
\alias{dbCommit_AdbiConnection}
\alias{dbCommit,AdbiConnection-method}
\alias{dbDataType_AdbiConnection}
\alias{dbDataType,AdbiConnection-method}
\alias{dbExistsTable_AdbiConnection_Id}
\alias{dbExistsTable,AdbiConnection,Id-method}
\alias{dbExistsTable_AdbiConnection_SQL}
\alias{dbExistsTable,AdbiConnection,SQL-method}
\alias{dbExistsTable_AdbiConnection_character}
\alias{dbExistsTable,AdbiConnection,character-method}
\alias{dbGetInfo_AdbiConnection}
\alias{dbGetInfo,AdbiConnection-method}
\alias{dbIsValid_AdbiConnection}
\alias{dbIsValid,AdbiConnection-method}
\alias{dbListFields_AdbiConnection_Id}
\alias{dbListFields,AdbiConnection,Id-method}
\alias{dbListFields_AdbiConnection_SQL}
\alias{dbListFields,AdbiConnection,SQL-method}
\alias{dbListFields_AdbiConnection_character}
\alias{dbListFields,AdbiConnection,character-method}
\alias{dbListTables_AdbiConnection}
\alias{dbListTables,AdbiConnection-method}
\alias{dbQuoteIdentifier_AdbiConnection_character}
\alias{dbQuoteIdentifier,AdbiConnection,character-method}
\alias{dbQuoteIdentifier,AdbiConnection,SQL-method}
\alias{dbQuoteLiteral_AdbiConnection_character}
\alias{dbQuoteLiteral,AdbiConnection,character-method}
\alias{dbQuoteString_AdbiConnection_character}
\alias{dbQuoteString,AdbiConnection,character-method}
\alias{dbQuoteString,AdbiConnection,SQL-method}
\alias{dbRemoveTable_AdbiConnection}
\alias{dbRemoveTable,AdbiConnection,character-method}
\alias{dbRemoveTable,AdbiConnection,Id-method}
\alias{dbRollback_AdbiConnection}
\alias{dbRollback,AdbiConnection-method}
\alias{dbUnquoteIdentifier_AdbiConnection}
\alias{dbUnquoteIdentifier,AdbiConnection-method}
\alias{dbWriteTable_AdbiConnection_Id_data.frame}
\alias{dbWriteTable,AdbiConnection,Id,data.frame-method}
\alias{dbWriteTable_AdbiConnection_SQL_data.frame}
\alias{dbWriteTable,AdbiConnection,SQL,data.frame-method}
\alias{dbWriteTable_AdbiConnection_character_data.frame}
\alias{dbWriteTable,AdbiConnection,character,data.frame-method}
\alias{show_AdbiConnection}
\alias{show,AdbiConnection-method}
\title{Class AdbiConnection (and methods)}
\usage{
\S4method{dbAppendTable}{AdbiConnection}(conn, name, value, ..., row.names = NULL)

\S4method{dbBegin}{AdbiConnection}(conn, ...)

\S4method{dbCommit}{AdbiConnection}(conn, ...)

\S4method{dbDataType}{AdbiConnection}(dbObj, obj, ...)

\S4method{dbExistsTable}{AdbiConnection,Id}(conn, name, ...)

\S4method{dbExistsTable}{AdbiConnection,SQL}(conn, name, ...)

\S4method{dbExistsTable}{AdbiConnection,character}(conn, name, ...)

\S4method{dbGetInfo}{AdbiConnection}(dbObj, ...)

\S4method{dbIsValid}{AdbiConnection}(dbObj, ...)

\S4method{dbListFields}{AdbiConnection,Id}(conn, name, ...)

\S4method{dbListFields}{AdbiConnection,SQL}(conn, name, ...)

\S4method{dbListFields}{AdbiConnection,character}(conn, name, ...)

\S4method{dbListTables}{AdbiConnection}(conn, ...)

\S4method{dbQuoteIdentifier}{AdbiConnection,character}(conn, x, ...)

\S4method{dbQuoteIdentifier}{AdbiConnection,SQL}(conn, x, ...)

\S4method{dbQuoteLiteral}{AdbiConnection,character}(conn, x, ...)

\S4method{dbQuoteString}{AdbiConnection,character}(conn, x, ...)

\S4method{dbQuoteString}{AdbiConnection,SQL}(conn, x, ...)

\S4method{dbRemoveTable}{AdbiConnection,character}(conn, name, ..., temporary = FALSE, fail_if_missing = TRUE)

\S4method{dbRemoveTable}{AdbiConnection,Id}(conn, name, ..., temporary = FALSE, fail_if_missing = TRUE)

\S4method{dbRollback}{AdbiConnection}(conn, ...)

\S4method{dbUnquoteIdentifier}{AdbiConnection}(conn, x, ...)

\S4method{dbWriteTable}{AdbiConnection,Id,data.frame}(
  conn,
  name,
  value,
  overwrite = FALSE,
  append = FALSE,
  ...,
  field.types = NULL,
  row.names = NULL,
  temporary = FALSE
)

\S4method{dbWriteTable}{AdbiConnection,SQL,data.frame}(conn, name, value, ...)

\S4method{dbWriteTable}{AdbiConnection,character,data.frame}(conn, name, value, ...)

\S4method{show}{AdbiConnection}(object)
}
\arguments{
\item{conn}{A \link[DBI:DBIConnection-class]{DBI::DBIConnection} object,
as returned by \code{\link[DBI:dbConnect]{DBI::dbConnect()}}.}

\item{name}{The table name, passed on to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}. Options are:
\itemize{
\item a character string with the unquoted DBMS table name,
e.g. \code{"table_name"},
\item a call to \code{\link[DBI:Id]{Id()}} with components to the fully qualified table name,
e.g. \code{Id(schema = "my_schema", table = "table_name")}
\item a call to \code{\link[DBI:SQL]{SQL()}} with the quoted and fully qualified table name
given verbatim, e.g. \code{SQL('"my_schema"."table_name"')}
}}

\item{value}{A \link{data.frame} (or coercible to data.frame).}

\item{...}{Other parameters passed on to methods.}

\item{row.names}{A logical specifying whether the \code{row.names} should be
output to the output DBMS table; if \code{TRUE}, an extra field whose name
will be whatever the R identifier \code{"row.names"} maps to the DBMS (see
\code{\link[DBI:make.db.names]{DBI::make.db.names()}}). If \code{NA} will add rows names if
they are characters, otherwise will ignore.}

\item{dbObj}{A object inheriting from \link[DBI:DBIDriver-class]{DBI::DBIDriver}
or \link[DBI:DBIConnection-class]{DBI::DBIConnection}}

\item{obj}{An R object whose SQL type we want to determine.}

\item{x}{A character vector, \link[DBI:SQL]{DBI::SQL} or \link[DBI:Id]{DBI::Id} object to quote as
identifier.}

\item{temporary}{a logical specifying whether the new table should be
temporary. Its default is \code{FALSE}.}

\item{fail_if_missing}{If \code{FALSE}, \code{\link[DBI:dbRemoveTable]{DBI::dbRemoveTable()}} succeeds if the
table doesn't exist.}

\item{overwrite}{Allow overwriting the destination table. Cannot be
\code{TRUE} if \code{append} is also \code{TRUE}.}

\item{append}{Allow appending to the destination table. Cannot be
\code{TRUE} if \code{overwrite} is also \code{TRUE}.}

\item{field.types}{character vector of named SQL field types where
the names are the names of new table's columns. If missing, types inferred
with \code{\link[DBI:dbDataType]{DBI::dbDataType()}}).}

\item{object}{Any R object}
}
\description{
AdbiConnection objects are created by passing \code{\link[=adbi]{adbi()}} as first
argument to \code{\link[DBI:dbConnect]{DBI::dbConnect()}}. They are a superclass of the
\link[DBI:DBIConnection-class]{DBI::DBIConnection} class. The "Usage" section lists the class
methods overridden by \pkg{adbi}.
}
\seealso{
The corresponding generic functions
\code{\link[DBI:dbSendQuery]{DBI::dbSendQuery()}}, \code{\link[DBI:dbGetQuery]{DBI::dbGetQuery()}},
\code{\link[DBI:dbSendStatement]{DBI::dbSendStatement()}}, \code{\link[DBI:dbExecute]{DBI::dbExecute()}},
\code{\link[DBI:dbExistsTable]{DBI::dbExistsTable()}}, \code{\link[DBI:dbListTables]{DBI::dbListTables()}}, \code{\link[DBI:dbListFields]{DBI::dbListFields()}},
\code{\link[DBI:dbRemoveTable]{DBI::dbRemoveTable()}}, and \code{\link[DBI:sqlData]{DBI::sqlData()}}.
}
\keyword{internal}
